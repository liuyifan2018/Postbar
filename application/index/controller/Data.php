<?php
namespace app\index\controller;
use app\index\Model\DataModel;
use app\index\Traits\Date;
use app\index\Traits\Whole;
use app\index\Traits\User;
use think\Controller;
use think\Db;
use think\Request;

class Data extends Controller
{
    use Whole{
        isUser as public;
        isOutInsider as public;
    }
    /**
     * @var $model
     * 公共模型
     */
    protected $model;
    /**
     * @var $data
     * 用户信息
     */
    protected $data;

    /**
     * 初始化
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        try{
            self::isUser();
            self::isOutInsider();
            $data = Whole::dataInfo();
            $this->model = new DataModel( $data );
            $this->data = $data;
        }catch (\Exception $e){
            $this->error( $e->getMessage() );
        }
    }

	/**
	 * @return DataModel
	 * @throws \Exception
	 */
    public function model(){
        return new DataModel( Whole::dataInfo() );
    }

    /**
     * @return mixed
     * 用户中心
     */
    public function index(){
        try{
            $arr = Whole::Classify();    //获取头部分类
            $data = Whole::dataInfo();  //获取用户信息
            $data['last_insider'] = Date::getDate($data['last_insider']);
            $start_time = Date::getNowStartTime();
            $end_time = Date::getNowEndTime();
            $signed = Db::table('signed')
                ->where(array('username' => $data['username']))
                ->whereTime('date','between',array($start_time , $end_time))
                ->select();//检测今天是否签到
            $signedUser = Db::table('signed')->where(array('username' => $data['username']))->select();
            $signedCount = count($signedUser);
            $signedTime = (end($signedUser));
            return view('index',[
            	'title' =>  '用户中心',
	            'arr'   =>  $arr,
	            'signed'    =>  $signed,
	            'data'  =>  $data,
	            'signedCount'  =>  $signedCount,
	            'signedTime'    =>  $signedTime
            ]);
        }catch (\Exception $e){
            $this->error( $e->getMessage());
        }
    }

    /**
     * @return mixed
     * 用户资料
     */
    public function user(){
        try{
        	$this->model = $this->model();
            $arr = Whole::Classify();    //获取头部分类
            $data = Whole::dataInfo();  //获取用户信息
            if(Request()->isGet()){
                $username = input('username');
                $user = $this->model->user( $username );
            }else{
                $this->error('访问失败!');
            }
            return view('user',[
	            'arr'   =>  $arr,
	            'user'  =>  $user,
	            'data'  =>  $data,
            ]);
        }catch (\Exception $e){
            $this->error($e->getMessage());
        }

    }
    /**
     * @return mixed
     * 选择Tab
     */
    public function set(){
    	try{
		    $arr = Whole::Classify();    //获取头部分类
		    $data = Whole::dataInfo();  //获取用户信息
		    $tion = input('get.tion');
		    if(empty($tion)){
			    $tion = 1;
		    }
		    return view('set',[
				'title' =>  '基本设置',
			    'arr'   =>  $arr,
			    'data'  =>  $data,
			    'tion'  =>  $tion
		    ]);
	    }catch (\Exception $e){
    		$this->error( $e->getMessage() );
	    }
    }

    /**
     * @return mixed
     * 用户签到
     */
    public function signed(){
        try{
            $this->model = $this->model();
            if(Request()->isGet()){
                $msg = input('get.');
                $msg['date'] = Date::getNowTime();
                $start_time = Date::getNowStartTime();
                $end_time = Date::getNowEndTime();
                $this->model->signed($start_time,$end_time,$msg);
            }
        }catch (\Exception $e){
            return json_decode( $e->getMessage(),true);
        }
    }
    /**
     * @return \think\response\Json
     * 修改资料
     */
    public function update(){
        if(Request()->isPost()){
            $msg = input('post.');
            if($msg['city'] == $this->data['city'] && $msg['auto'] == $this->data['auto']){
                return json(array('code' => 0 ,'msg' => '未做任何修改!'));
            }else{
                Db::table('user')->where(User::username())->update($msg);   //修改用户资料
                return json(array('code' => 1 ,'msg' => '修改成功!'));
            }
        }
    }
    /**
     * 上传图片
     */
    public function upImage(){
        try{
            $this->model = $this->model();
            if (Request()->isPost()){
                $uid = input('post.uid',0,'intval');
                $file = request()->file('image');
                if( empty( $file) ) throw new \Exception('没有上传图片!');
                $info = $file
	                ->rule('md5')
	                ->validate(['size'=>15678,'ext'=>'jpg,png,gif'])
	                ->move( '../uploads'); //移至到框架应用根目录uploads/目录下
                if($info){
                    $this->model->upImage($uid,$info->getSaveName());
                }else{
                    $this->error($file->getError());
                }
            }
        }catch (\Exception $e){
            $this->error( $e->getMessage() );
        }
    }
    /**
     * @return \think\response\Json
     * 修改密码
     */
    public function upPass(){
        try{
            $this->model = $this->model();
            if(Request()->isPost()){
                $msg = input('post.');
                $this->model->upPass($msg);
            }
        }catch (\Exception $e){
            return json_decode( $e->getMessage() ,true);
        }
    }
    /**
     * @return mixed
     * 我的帖子
     */
    public function note(){
        try{
            $this->model = $this->model();
            $arr = Whole::Classify();    //获取头部分类
            $data = Whole::dataInfo();  //获取用户信息
            $tion = input('get.tion');
            if(empty($tion)){
                $tion = 1;
            }
            $note = $this->model->note();
            return view('note',[
            	'title' =>  '我的帖子',
	            'tion'  =>  $tion,
	            'note'  =>  $note,
	            'data'  =>  $data,
	            'arr'   =>  $arr
            ]);
        }catch (\Exception $e){
            $this->error( $e->getMessage() );
        }



    }
    /**
     * @return \think\response\Json
     * 修改帖子状态
     */
    public function is_show(){
        try{
            $this->model = $this->model();
            if(Request()->isGet()){
                $data = input('get.');
                $this->model->is_show( $data );
            }
        }catch (\Exception $e){
            return json_decode( $e->getMessage() ,true);
        }

    }
    /**
     * @return mixed
     * 充值中心
     */
    public function recharge(){
        try{
            $this->model = $this->model();
            $arr = Whole::Classify();    //获取头部分类
            $data = Whole::dataInfo();  //获取用户信息
            $tion = input('get.tion');
            if(empty($tion)){$tion = 1;}
            if(Request()->isPost()){
                $msg = input('post.');
                $this->model->recharge($msg);
            }
            return $this->fetch('recharge',[
            	'title' =>  '充值中心',
                'arr'   =>  $arr,
                'tion'  =>  $tion,
                'data'  =>  $data
            ]);
        }catch (\Exception $e){
            return json_decode( $e->getMessage() ,true);
        }

    }
    /**
     * @return \think\response\Json
     * 开通会员
     */
    public function insider(){
        try{
            $this->model = $this->model();
            if(Request()->isPost()){
                $msg = input('post.');
                $this->model->insider( $msg );
            }
        }catch (\Exception $e){
            return json_decode( $e->getMessage() ,true);
        }
    }
}